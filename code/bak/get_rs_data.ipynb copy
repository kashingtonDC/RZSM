{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import glob\n",
    "import os\n",
    "import pandas as pd\n",
    "import ee\n",
    "import numpy as np\n",
    "import geopandas as gp\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import rsfuncs as rs\n",
    "\n",
    "from scipy import stats\n",
    "from scipy.signal import savgol_filter\n",
    "from datetime import datetime, timedelta\n",
    "from datetime import datetime as dt\n",
    "from itertools import chain\n",
    "\n",
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "\n",
    "plt.rcParams['figure.figsize'] = [18,16]\n",
    "ee.Initialize()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# EE functions are in the rsfuncs module. Loacal functions are here: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def read_sm_file(filename):\n",
    "    with open(filename) as f:\n",
    "        contents = f.readlines()\n",
    "\n",
    "    data = []\n",
    "    for line in contents:\n",
    "        if line[0:1] == \"#\":\n",
    "            continue\n",
    "        else:\n",
    "            data.append(line)\n",
    "\n",
    "    headers = [x.replace(\"Soil Moisture Percent\",\"smp\").replace(\" \",\"_\") for x in data[0].split(\",\")]\n",
    "    cols = [x.strip(\"\\n\").split(\",\") for x in data[1:]]\n",
    "\n",
    "    df = pd.DataFrame(cols, columns = headers)\n",
    "    \n",
    "    return df\n",
    "\n",
    "def imlist_2_timeseries(imlist,polarization, area):\n",
    "    \n",
    "    '''\n",
    "    This essemtially combines `get_ims_by_date` and `array from latlon` functions below \n",
    "    '''\n",
    "    num_ims = len(imlist.getInfo())\n",
    "\n",
    "    ims = []\n",
    "    dates = []\n",
    "    \n",
    "    for idx in range (0, num_ims):\n",
    "        latlon = ee.Image.pixelLonLat().addBands(imlist.get(idx))\n",
    "        res = latlon.reduceRegion(reducer=ee.Reducer.toList(),geometry=area,maxPixels=1e8,scale=10)\n",
    "        \n",
    "        try:\n",
    "            lats = np.array((ee.Array(res.get(\"latitude\")).getInfo()))\n",
    "            lons = np.array((ee.Array(res.get(\"longitude\")).getInfo()))\n",
    "            data = np.array((ee.Array(res.get(polarization)).getInfo()))\n",
    "        except:\n",
    "            data = np.full_like(lats, np.nan,dtype=np.float64)\n",
    "\n",
    "        im = make_np_array(data, lats, lons)\n",
    "        ims.append(im)\n",
    "        \n",
    "        date =  latlon.get('system:time_start')\n",
    "        info_dict = imlist.get(i).getInfo()\n",
    "        date = info_dict['id']\n",
    "        dates.append(date)\n",
    "        \n",
    "    return ims, dates\n",
    "\n",
    "def get_ims_by_date(ims_list, var, res=10):\n",
    "    imlist = []\n",
    "    imdates = []\n",
    "    num_images = len(ims_list.getInfo())\n",
    "\n",
    "    for i in range (0, num_images):\n",
    "        \n",
    "        if i % 5 == 0:\n",
    "            print(str((i / num_images)*100)[:5] + \" % \")\n",
    "\n",
    "        latlon = ee.Image.pixelLonLat().addBands(ims_list.get(i))\n",
    "        imlist.append(array_from_latlon(latlon, var, res))\n",
    "        date =  latlon.get('system:time_start')\n",
    "        info_dict = ims_list.get(i).getInfo()\n",
    "        date = info_dict['id']\n",
    "        imdates.append(date)\n",
    "  \n",
    "    return imlist, imdates\n",
    "\n",
    "def array_from_latlon(latlon_obj, var, res):\n",
    "    res = latlon_obj.reduceRegion(reducer=ee.Reducer.toList(),geometry=area,maxPixels=1e8,scale=res)\n",
    "    try:\n",
    "        lats = np.array((ee.Array(res.get(\"latitude\")).getInfo()))\n",
    "        lons = np.array((ee.Array(res.get(\"longitude\")).getInfo()))\n",
    "        data = np.array((ee.Array(res.get(var)).getInfo()))\n",
    "    except:\n",
    "        data = np.full_like(lats, np.nan,dtype=np.float64)\n",
    "    \n",
    "    out = make_np_array(data, lats, lons)\n",
    "    return out   \n",
    "\n",
    "def make_np_array(data, lats, lons):\n",
    "    # get data from df as arrays\n",
    "    lons = np.array(lons)\n",
    "    lats = np.array(lats)\n",
    "    data = np.array(data) # Set var here \n",
    "                                              \n",
    "    # get the unique coordinates\n",
    "    uniqueLats = np.unique(lats)\n",
    "    uniqueLons = np.unique(lons)\n",
    "\n",
    "    # get number of columns and rows from coordinates\n",
    "    ncols = len(uniqueLons)    \n",
    "    nrows = len(uniqueLats)\n",
    "\n",
    "    # determine pixelsizes\n",
    "    ys = uniqueLats[1] - uniqueLats[0] \n",
    "    xs = uniqueLons[1] - uniqueLons[0]\n",
    "\n",
    "    # create an array with dimensions of image\n",
    "    arr = np.zeros([nrows, ncols], np.float32)\n",
    "\n",
    "    # fill the array with values\n",
    "    counter =0\n",
    "    for y in range(0,len(arr),1):\n",
    "        for x in range(0,len(arr[0]),1):\n",
    "            if lats[counter] == uniqueLats[y] and lons[counter] == uniqueLons[x] and counter < len(lats)-1:\n",
    "                counter+=1\n",
    "                arr[len(uniqueLats)-1-y,x] = data[counter] # we start from lower left corner\n",
    "    \n",
    "    return arr\n",
    "\n",
    "def filter_date(product,y,m,d):\n",
    "    start = ee.Date.fromYMD(y,m,d).advance(-1, \"day\")\n",
    "    end = ee.Date.fromYMD(y,m,d)\n",
    "    prod = product.filterDate(start, end).sort('system:time_start', False).select(\"ppt\")\n",
    "    return prod\n",
    "\n",
    "def format_dates(dates):\n",
    "    for idx, x in enumerate(dates):\n",
    "        timestamp = x.find(\"V_\")+2\n",
    "        timestr = x[timestamp:timestamp+13]\n",
    "        dates[idx] = pd.to_datetime(timestr, format='%Y%m%d %H:%M')\n",
    "    return dates\n",
    "\n",
    "def get_2day_precip(latlon_obj, area):\n",
    "    res = latlon_obj.reduceRegion(reducer=ee.Reducer.sum(),geometry=area,scale=10)\n",
    "    data = np.array((ee.Array(res.get(\"ppt\")).getInfo()))\n",
    "    out = np.array(data)\n",
    "    return out \n",
    "\n",
    "def get_ndvi(latlon_obj, area):\n",
    "    res = latlon_obj.reduceRegion(reducer=ee.Reducer.mean(),geometry=area,scale=10)\n",
    "    data = np.array((ee.Array(res.get(\"NDVI\")).getInfo()))\n",
    "    out = np.array(data)\n",
    "    return out \n",
    "\n",
    "def round_up_to_odd(f):\n",
    "    f = int(np.ceil(f))\n",
    "    return f + 1 if f % 2 == 0 else f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "site_file = gp.read_file(\"../shape/scan_sites.shp\")\n",
    "sites = site_file[~site_file['state'].isin([\"AK\", \"HI\", \"PR\", \"VI\"])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = rs.load_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_dir = \"../data\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "out_dict = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processings site no 808\n",
      "Cultivated Crops - Areas used for the production of annual crops, such as corn, soybeans, vegetables, tobacco, and cotton, and also perennial woody crops such as orchards and vineyards. Crop vegetation accounts for greater than 20 percent of total vegetation. This class also includes all land being actively tilled.\n",
      "Processing 184 VV sentinel overapasses\n",
      "0.0 % \n",
      "2.717 % \n",
      "no valid VV overpasses\n",
      "no valid HV overpasses\n",
      "No valid sentinel data \n"
     ]
    }
   ],
   "source": [
    "# For each site id, find the sm file with the data (in data dir), \n",
    "# calculate psi as psi = A * SM ^b (krishna's paper )\n",
    "# query the (1) landcover, (2) Sentinel backscatter (Prism P), MODIS / Landsat LAI for the whole timeseries \n",
    "   \n",
    "for idx, row in sites[sites.id == \"808\"].iterrows():\n",
    "    \n",
    "    if row.id in out_dict.keys():\n",
    "        print(row.id)\n",
    "        continue\n",
    "        \n",
    "    print(\"Processings site no {}\".format(row.id))\n",
    "    \n",
    "    # Make geom to submit to EE \n",
    "    x,y = row.geometry.buffer(0.0001).envelope.exterior.coords.xy\n",
    "    coords = [list(zip(x,y))]\n",
    "    area = ee.Geometry.Polygon(coords)\n",
    "    \n",
    "    # Get the corresponding SCAN data file from data folder\n",
    "    site_id = row.id\n",
    "    sm_file = [os.path.join(data_dir,x) for x in os.listdir(data_dir) if site_id in x][0]\n",
    "    sm_dat = read_sm_file(sm_file)\n",
    "    sm_dat['Date'] =  pd.to_datetime(sm_dat['Date'], format='%Y%m%d %H:%M')\n",
    "    sm_dat.set_index('Date', inplace=True)\n",
    "        \n",
    "    # start and end date\n",
    "    if sm_dat.empty:\n",
    "        print(\"no valid soil moisture data for {}\".format(row.id))\n",
    "        continue\n",
    "        \n",
    "    startdate = sm_dat.index[0]\n",
    "    enddate = sm_dat.index[-1]\n",
    "    \n",
    "    date = startdate.strftime(\"%Y-%m-%d\")\n",
    "        \n",
    "    # Select the nlcd dataset\n",
    "    dataset =  rs.load_data()['nlcd']\n",
    "    ic = dataset[0]\n",
    "    var = dataset[1]\n",
    "    res = dataset[3]\n",
    "    \n",
    "    # find the nearest nlcd dataset\n",
    "    col = ic.filterDate(ee.Date(date).advance(-1, 'years'), ee.Date(date).advance(2, 'years')).first()\n",
    "    if not col.getInfo():\n",
    "        col = ic.filterDate(ee.Date(date).advance(-3, 'years'), ee.Date(date).advance(2, 'years')).first()\n",
    "    t = col.reduceRegion(ee.Reducer.frequencyHistogram(), area, res).get(var)\n",
    "    meta = col.getInfo()\n",
    "    lc_class = int(list(t.getInfo().keys())[0])\n",
    "    \n",
    "    # Get the landcover type\n",
    "    lcidx = meta['properties']['landcover_class_values'].index(lc_class)\n",
    "    lctype = meta['properties']['landcover_class_names'][lcidx]\n",
    "    print(lctype)\n",
    "    \n",
    "    # Get Sentinel images and dates (descending orbits only, VV, HV polarization)\n",
    "    s1 = rs.load_data()['s1']\n",
    "    s1ic, s1var, s1res = s1[0], s1[1], s1[3]\n",
    "    \n",
    "    # descending is the correct orbit for the AM. Get the S1 VH and VV pols \n",
    "    vvcol = s1ic.filterBounds(area).filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING')).select('VV').filterDate(startdate,enddate).sort('system:time_start')\n",
    "    vv = vvcol.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))\n",
    "    hvcol = s1ic.filterBounds(area).filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING')).select('VH').filterDate(startdate,enddate).sort('system:time_start')\n",
    "    hv = hvcol.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))\n",
    "    \n",
    "    # Fetch the S1 data: For each polarization, Call EE, except an empty list \n",
    "    try:\n",
    "        vv_ims = vv.toList(vv.size())\n",
    "        print(\"Processing {} VV sentinel overapasses\".format(len(vv_ims.getInfo())))\n",
    "        s1_vv, vv_dates = get_ims_by_date(vv_ims,\"VV\")\n",
    "    except:\n",
    "        print(\"no valid VV overpasses\")\n",
    "        s1_vv = []\n",
    "        vv_dates = []\n",
    "        pass\n",
    "    \n",
    "    try:\n",
    "        hv_ims = hv.toList(hv.size())\n",
    "        print(\"Processing {} HV sentinel overapasses\".format(len(hv_ims.getInfo())))\n",
    "        s1_hv, hv_dates = get_ims_by_date(hv_ims,\"VH\")\n",
    "    except:\n",
    "        print(\"no valid HV overpasses\")\n",
    "        s1_hv = []\n",
    "        hv_dates = []\n",
    "        pass \n",
    "    \n",
    "    if len(s1_hv) == 0 and len(s1_vv) == 0:\n",
    "        print(\"No valid sentinel data \")\n",
    "        continue\n",
    "    \n",
    "    # Convert the datestrings from S1 to pandas datetimes \n",
    "       \n",
    "    vvdates = format_dates(vv_dates)\n",
    "    hvdates = format_dates(hv_dates)\n",
    "    \n",
    "    s1_vv = [x.flatten() for x in s1_vv]\n",
    "    s1_hv = [x.flatten() for x in s1_hv]\n",
    "    \n",
    "    vvdf = pd.DataFrame(list(dict(zip(vv_dates, s1_vv)).items()),\n",
    "                      columns=['t','vv'])\n",
    "    hvdf = pd.DataFrame(list(dict(zip(hv_dates, s1_hv)).items()),\n",
    "                      columns=['t','hv'])\n",
    "    \n",
    "    vvdf = rs.col_to_dt(vvdf)\n",
    "    hvdf = rs.col_to_dt(hvdf)\n",
    "    \n",
    "    break\n",
    "        \n",
    "    # Get PRISM data for all the S1 overpass dates to filter the rainy days\n",
    "    print(\"processing PRISM\")\n",
    "    rainfall = []\n",
    "\n",
    "    for i,x in enumerate(vv_dates):\n",
    "        if i % 5 == 0:\n",
    "            print(str((i / len(vv_dates))*100)[:5] + \" % \")\n",
    "        \n",
    "        y,m,d = vv_dates[i].year, vv_dates[i].month, vv_dates[i].day\n",
    "        t = filter_date(rs.load_data()['prism_daily'][0], y, m, d).sum()\n",
    "        precip_total = get_2day_precip(t, area)\n",
    "        rainfall.append(precip_total)\n",
    "\n",
    "                \n",
    "    # Landsat - Note: some sites are in the overlap areas between passes.\n",
    "    # these sites can have multiple obs / day or obs separated by 8days instead of 16. \n",
    "    \n",
    "    print(\"Processing Landsat\")\n",
    "    landsat = rs.load_data()['l8_sr']\n",
    "    lic, lvar, lsf = landsat[0],landsat[1], landsat[2]\n",
    "\n",
    "    lstart = ee.Date.fromYMD(startdate.year,startdate.month,startdate.day).advance(-9,\"day\")\n",
    "    lend = ee.Date.fromYMD(enddate.year,enddate.month,enddate.day).advance(8, \"day\")\n",
    "\n",
    "    l8_col = lic.filterDate(lstart,lend).filterBounds(area).map(rs.mask_quality) # Mask clouds and shadows \n",
    "    lt = l8_col.sort('system:time_start')\n",
    "    lims = lt.toList(lt.size())\n",
    "\n",
    "    num_ims = len(lims.getInfo())\n",
    "\n",
    "    ldfs = []\n",
    "\n",
    "    for i in range(0, num_ims):\n",
    "        if i % 5 == 0:\n",
    "            print(str((i / num_ims)*100)[:5] + \" % \")\n",
    "\n",
    "        ls_latlon = ee.Image.pixelLonLat().addBands(lims.get(i))\n",
    "        ltemp = ls_latlon.select([\"B1\",\"B2\",\"B3\",\"B4\",\"B5\",\"B6\",\"B7\"]).multiply(lsf)\n",
    "        l8_res = ltemp.reduceRegion(reducer=ee.Reducer.mean(),geometry=area,bestEffort=True,scale=30)\n",
    "\n",
    "        l8_info_dict = lims.get(i).getInfo()\n",
    "        l8_date = l8_info_dict['id'][-8:]\n",
    "\n",
    "        l8_out = l8_res.getInfo()\n",
    "\n",
    "        ldf = pd.DataFrame.from_dict(l8_out.values()).T\n",
    "        ldf.columns = l8_out.keys()\n",
    "        ldf.index = pd.to_datetime([l8_date])\n",
    "        ldfs.append(ldf)\n",
    "        \n",
    "                        \n",
    "    # Filter the SCAN data for the S1 dates, use 3 am - 7 am mean \n",
    "    rzsm = []\n",
    "    ssm = []\n",
    "    \n",
    "    for i in vv_dates:\n",
    "        starttime = i.replace(second=0, microsecond=0, minute=0, hour=3)\n",
    "        endtime = starttime+timedelta(hours= 4)\n",
    "        df = pd.DataFrame(sm_dat[starttime:endtime])\n",
    "        \n",
    "        rzsm.append(df[df.columns[-1]].values)\n",
    "        ssm.append(df[df.columns[-3]].values)\n",
    "    \n",
    "    # In case there are nans or data gaps in the sm data\n",
    "    rzsm = [list(filter(None, x)) for x in rzsm]\n",
    "    ssm = [list(filter(None, x)) for x in ssm]\n",
    "    \n",
    "    # Calc the 5 hour mean for each sensor reading \n",
    "    for idx,x in enumerate(rzsm):\n",
    "        rzsm[idx] = np.nanmean([np.float(i) for i in x])\n",
    "    \n",
    "    for idx,x in enumerate(ssm):\n",
    "        ssm[idx] = np.nanmean([np.float(i) for i in x])\n",
    "\n",
    "    # params to calculate psi \n",
    "    a = row.a\n",
    "    b = row.b\n",
    "    \n",
    "    # RZ and Surface LWP = A * sm ^b\n",
    "    psi1 = [a*(x/100)**b for x in rzsm]\n",
    "    psi2 = [a*(x/100)**b for x in ssm]\n",
    "    \n",
    "    # Make a dataframe out of everything\n",
    "    df = pd.DataFrame([vv_dates, rainfall, rzsm,psi1,ssm,psi2, [lcidx]*len(vv_dates)])\n",
    "    df = df.T\n",
    "    df.columns = (['date', \"precip\", \"rzsm\",\"psi_rz\", \"ssm\", \"psi_s\", \"lc_type\"])\n",
    "    df = rs.col_to_dt(df) # set the date col as datetime index \n",
    "    \n",
    "    dft = pd.concat([df, vvdf, hvdf], axis=1)\n",
    "    \n",
    "    print(dft.head())\n",
    "    \n",
    "    dfout = dft.copy()\n",
    "    \n",
    "    # Drop non rainy overpasses from df \n",
    "#     mask=(df['precip'] < 0.1)\n",
    "#     dfout = df[mask]\n",
    "\n",
    "    # Golay interpolation for landsat \n",
    "    \n",
    "    ls = pd.concat(ldfs)\n",
    "    win_len = round_up_to_odd(num_ims/5)\n",
    "    \n",
    "    for i in ls.columns:\n",
    "        ls[i][ls[i] == 0] = np.nan\n",
    "        ls[i] = ls[i].interpolate(method = \"linear\")\n",
    "        ls[i+\"_filt\"] = savgol_filter(ls[i], window_length=win_len, polyorder=2)\n",
    "    \n",
    "    ls_df = ls[(ls.T != 0).any()]\n",
    "    ls_df = ls_df.groupby(level = 0).mean()\n",
    "    \n",
    "    # Break the loop if there are no non- rainy sentinel overpasses \n",
    "    if dfout.empty:\n",
    "        print(\"No non-rainy overpaasses \")\n",
    "        continue \n",
    "        \n",
    "    l8_dfs = []\n",
    "    \n",
    "    for i in dfout.index:\n",
    "        l8_idx = ls_df.index.get_loc(i, method='nearest')\n",
    "        l8_contemp = ls_df.iloc[l8_idx]\n",
    "        t = pd.DataFrame(l8_contemp).T\n",
    "        l8_dfs.append(t)\n",
    "    \n",
    "    fin_ls = pd.concat(l8_dfs)\n",
    "\n",
    "    FIN = pd.concat( [dfout.reset_index(drop=True), fin_ls.reset_index(drop=True)], axis=1) \n",
    "    FIN.index = dfout.index\n",
    "\n",
    "    print(FIN.head())\n",
    "    \n",
    "    out_dict[(row.id)] = FIN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "ims = vv_ims.getInfo()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "ids = []\n",
    "for i in ims:\n",
    "    ids.append(i['id'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "dates = format_dates(ids)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20150116T133214_20150116T133239_004197_005183_76AD',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20150121T134028_20150121T134053_004270_005317_03A9',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20150209T133213_20150209T133238_004547_005961_0F62',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20150214T134028_20150214T134053_004620_005B16_30EC',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20150305T133213_20150305T133238_004897_0061AF_8F59',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20150310T134028_20150310T134053_004970_006386_207A',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20150329T133214_20150329T133239_005247_006A0B_1632',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20150403T134029_20150403T134054_005320_006BC4_4B91',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20150422T133214_20150422T133239_005597_0072A1_5595',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20150427T134030_20150427T134055_005670_00745C_C9BE',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20150516T133216_20150516T133241_005947_007A98_0975',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20150521T134031_20150521T134056_006020_007C3F_F645',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20150609T133218_20150609T133243_006297_008436_8CE0',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20150614T134033_20150614T134058_006370_00864B_C611',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20150703T133218_20150703T133243_006647_008DF9_6E5D',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20150708T134033_20150708T134058_006720_008FF0_5BB0',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20150727T133220_20150727T133245_006997_0097F2_FFD4',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20150801T134035_20150801T134100_007070_0099EE_46FD',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20150820T133221_20150820T133246_007347_00A174_58DF',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20150825T134036_20150825T134101_007420_00A36C_5BC1',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20150913T133222_20150913T133247_007697_00AAF8_495C',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20150918T134037_20150918T134102_007770_00ACDC_2B39',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20151007T133222_20151007T133247_008047_00B44E_2DA9',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20151012T134037_20151012T134102_008120_00B638_0DA8',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20151031T133222_20151031T133247_008397_00BDC3_4F36',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20151124T133216_20151124T133241_008747_00C759_A2B3',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20151129T134031_20151129T134056_008820_00C95F_55B6',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20151218T133215_20151218T133240_009097_00D121_E57E',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20151223T134030_20151223T134055_009170_00D334_030B',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20160111T133215_20160111T133240_009447_00DB1E_CB63',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20160204T133214_20160204T133239_009797_00E54F_0C42',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20160209T134029_20160209T134054_009870_00E75B_BC3D',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20160228T133214_20160228T133239_010147_00EF74_B304',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20160304T134029_20160304T134054_010220_00F179_AEAB',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20160323T133214_20160323T133239_010497_00F962_EEC7',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20160328T134029_20160328T134054_010570_00FB75_304E',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20160416T133215_20160416T133240_010847_0103B6_D36C',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20160421T134030_20160421T134055_010920_0105EF_9F35',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20160510T133217_20160510T133242_011197_010EAC_131D',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20160515T134031_20160515T134056_011270_011109_9241',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20160603T133218_20160603T133243_011547_011A0C_B71A',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20160608T134033_20160608T134058_011620_011C43_F448',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20160702T134034_20160702T134059_011970_012757_328C',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20160721T133220_20160721T133245_012247_013069_1EB0',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20160726T134035_20160726T134100_012320_0132C6_C4AB',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20160814T133222_20160814T133247_012597_013BFD_5B5A',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20160819T134037_20160819T134102_012670_013E69_DAD6',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20160907T133223_20160907T133248_012947_0147A1_D843',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20160912T134038_20160912T134103_013020_0149F3_6672',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20161006T134047_20161006T134116_013370_015544_EF50',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20161013T133232_20161013T133300_013472_01588F_C5B8',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20161018T134030_20161018T134101_013545_015AE0_38E7',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20161030T134047_20161030T134116_013720_016034_1B6C',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20161106T133232_20161106T133300_013822_016375_68CB',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20161111T134030_20161111T134100_013895_0165CC_5F93',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20161130T133231_20161130T133259_014172_016E46_53F2',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20161205T134030_20161205T134100_014245_017093_D3DE',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20161217T134046_20161217T134115_014420_017613_DBE3',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20161224T133231_20161224T133259_014522_01794C_DFCA',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20161229T134029_20161229T134059_014595_017B90_2920',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20170110T134044_20170110T134113_014770_0180CA_7107',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20170117T133229_20170117T133257_014872_01840F_0C2F',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SSV_20170203T134044_20170203T134113_015120_018B90_E0F6',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170222T133228_20170222T133253_015397_019446_9B7C',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170227T134043_20170227T134112_015470_019673_8EA0',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SSV_20170305T133944_20170305T134009_004574_007F8C_6A52',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170306T133228_20170306T133253_015572_019993_539A',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170311T134044_20170311T134113_015645_019BC0_3A8A',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SSV_20170317T133945_20170317T134009_004749_0084B6_0C1B',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170318T133228_20170318T133253_015747_019EC7_C03A',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170323T134044_20170323T134113_015820_01A0F2_DDCE',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SSV_20170329T133945_20170329T134010_004924_0089B8_A8D3',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170330T133228_20170330T133253_015922_01A3FD_A384',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170404T134044_20170404T134113_015995_01A623_AD4A',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SSV_20170410T133945_20170410T134010_005099_008EC5_3C2F',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170411T133229_20170411T133254_016097_01A948_D1DF',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170416T134045_20170416T134114_016170_01AB80_E242',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SSV_20170422T133946_20170422T134011_005274_0093D2_4960',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170423T133230_20170423T133255_016272_01AEA3_7E55',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170428T134045_20170428T134114_016345_01B0CF_FE81',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SSV_20170504T133947_20170504T134011_005449_0098D6_F1B1',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170505T133230_20170505T133255_016447_01B3E9_BFEB',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SSV_20170516T133947_20170516T134012_005624_009D99_F465',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170517T133231_20170517T133256_016622_01B941_7891',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20170528T133948_20170528T134012_005799_00A2AA_CDCC',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170529T133231_20170529T133256_016797_01BEA6_9CB0',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20170609T133949_20170609T134013_005974_00A7BD_9B3D',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170610T133232_20170610T133257_016972_01C414_0425',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20170621T133949_20170621T134014_006149_00ACD9_8841',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170622T133233_20170622T133258_017147_01C96F_21B8',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20170703T133950_20170703T134015_006324_00B1E9_C52D',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170704T133233_20170704T133258_017322_01CEBF_915F',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20170715T133951_20170715T134015_006499_00B6DA_257C',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170716T133234_20170716T133259_017497_01D407_EF3A',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20170727T133951_20170727T134016_006674_00BBD6_50F5',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170728T133235_20170728T133300_017672_01D964_E5D4',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20170808T133952_20170808T134017_006849_00C0E5_4A33',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170809T133236_20170809T133301_017847_01DEBD_14D0',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20170820T133953_20170820T134017_007024_00C601_9EDC',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170821T133236_20170821T133301_018022_01E40B_AE07',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20170901T133953_20170901T134018_007199_00CB0D_4CEA',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170902T133237_20170902T133302_018197_01E94D_D6C9',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20170913T133954_20170913T134018_007374_00D033_A192',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170914T133237_20170914T133302_018372_01EEC3_A750',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20170925T133954_20170925T134019_007549_00D53E_0FF3',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20170926T133237_20170926T133302_018547_01F425_2539',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20171007T133954_20171007T134019_007724_00DA47_0263',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20171008T133238_20171008T133303_018722_01F96E_63FE',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20171019T133954_20171019T134019_007899_00DF3D_95A5',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20171020T133238_20171020T133303_018897_01FED4_76EF',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20171101T133238_20171101T133303_019072_020427_0615',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20171112T133954_20171112T134019_008249_00E96F_8558',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20171113T133238_20171113T133303_019247_020993_5A29',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20171124T133954_20171124T134019_008424_00EEB9_E578',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20171125T133237_20171125T133302_019422_020F1A_BFCF',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20171206T133953_20171206T134018_008599_00F44A_419F',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20171207T133237_20171207T133302_019597_021490_B23B',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20171218T133953_20171218T134018_008774_00F9DE_910C',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20171219T133236_20171219T133301_019772_021A05_3907',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20171230T133953_20171230T134017_008949_00FF77_B1DA',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20171231T133236_20171231T133301_019947_021F73_0007',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20180111T133952_20180111T134017_009124_010530_E855',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20180112T133236_20180112T133301_020122_0224FA_00F7',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20180123T133952_20180123T134016_009299_010AE5_D598',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20180124T133235_20180124T133300_020297_022A8B_97E1',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20180204T133951_20180204T134016_009474_0110A2_7B06',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20180205T133235_20180205T133300_020472_023020_5FDA',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20180216T133951_20180216T134016_009649_011666_8EE4',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20180217T133235_20180217T133300_020647_0235B7_6C17',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20180228T133951_20180228T134016_009824_011C31_ABE3',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20180301T133235_20180301T133300_020822_023B44_D5F9',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20180312T133951_20180312T134016_009999_012211_2B71',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20180313T133235_20180313T133300_020997_0240CE_CFAC',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20180324T133951_20180324T134016_010174_0127BA_D148',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20180325T133235_20180325T133300_021172_02465D_B9FF',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20180405T133952_20180405T134017_010349_012D6B_3C90',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20180406T133235_20180406T133300_021347_024BD7_B406',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20180417T133952_20180417T134017_010524_013302_7236',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20180418T133236_20180418T133301_021522_025156_3005',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20180429T133953_20180429T134017_010699_01389E_5AB8',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20180430T133236_20180430T133301_021697_0256CE_9EE7',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20180511T133953_20180511T134018_010874_013E44_D052',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20180512T133237_20180512T133302_021872_025C65_A77C',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20180523T133954_20180523T134019_011049_0143F5_B0F8',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20180524T133238_20180524T133303_022047_0261F2_5FAD',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20180604T133955_20180604T134019_011224_01499C_D17F',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20180605T133238_20180605T133303_022222_02677C_13B2',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20180616T133956_20180616T134020_011399_014EF7_A89A',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20180617T133239_20180617T133304_022397_026CE0_6121',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20180628T133956_20180628T134021_011574_01546B_C894',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20180710T133957_20180710T134022_011749_0159D7_8FB7',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20180711T133240_20180711T133305_022747_02772A_F3F7',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20180722T133958_20180722T134023_011924_015F31_E3DE',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20180723T133241_20180723T133306_022922_027CA6_10A0',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20180803T133958_20180803T134023_012099_016475_D22D',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20180804T133242_20180804T133307_023097_02821C_9133',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20180815T133959_20180815T134024_012274_0169DE_F355',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20180816T133242_20180816T133307_023272_0287C0_0837',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20180827T134000_20180827T134024_012449_016F4F_CDE5',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20180828T133243_20180828T133308_023447_028D5F_D27D',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20180908T134000_20180908T134025_012624_0174B5_6896',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20180909T133244_20180909T133309_023622_0292F9_DF06',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20180920T134001_20180920T134025_012799_017A0F_0087',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20180921T133244_20180921T133309_023797_02989A_3E0F',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20181002T134001_20181002T134026_012974_017F6A_5BCA',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20181003T133244_20181003T133309_023972_029E51_1CBB',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20181014T134001_20181014T134026_013149_0184BE_5307',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20181015T133245_20181015T133310_024147_02A40A_E5F4',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20181026T134001_20181026T134026_013324_018A2C_C1D1',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20181027T133245_20181027T133310_024322_02A9AA_026A',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20181107T134001_20181107T134026_013499_018FAC_C555',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20181108T133244_20181108T133309_024497_02AFC7_B9B5',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20181119T134001_20181119T134026_013674_01952F_BCDB',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20181120T133244_20181120T133309_024672_02B63C_CEA0',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20181201T134000_20181201T134025_013849_019AC9_1C97',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20181202T133244_20181202T133309_024847_02BC64_FF5F',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20181213T134000_20181213T134025_014024_01A076_E536',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20181214T133243_20181214T133308_025022_02C282_A7FF',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20181225T134000_20181225T134024_014199_01A646_4EE7',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20181226T133243_20181226T133308_025197_02C8D5_7496',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20190106T133959_20190106T134024_014374_01AC00_B114',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20190107T133242_20190107T133307_025372_02CF24_93D6',\n",
       " 'COPERNICUS/S1_GRD/S1B_IW_GRDH_1SDV_20190118T133959_20190118T134023_014549_01B1A5_A1CB',\n",
       " 'COPERNICUS/S1_GRD/S1A_IW_GRDH_1SDV_20190119T133242_20190119T133307_025547_02D57A_CE9B']"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "S1B_IW_GRDH_1SDV_20161124T032008_20161124T032033_003095_005430_9906"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Timestamp('2015-01-16 13:32:00'),\n",
       " Timestamp('2015-01-21 13:40:00'),\n",
       " Timestamp('2015-02-09 13:32:00'),\n",
       " Timestamp('2015-02-14 13:40:00'),\n",
       " Timestamp('2015-03-05 13:32:00'),\n",
       " Timestamp('2015-03-10 13:40:00'),\n",
       " Timestamp('2015-03-29 13:32:00'),\n",
       " Timestamp('2015-04-03 13:40:00'),\n",
       " Timestamp('2015-04-22 13:32:00'),\n",
       " Timestamp('2015-04-27 13:40:00'),\n",
       " Timestamp('2015-05-16 13:32:00'),\n",
       " Timestamp('2015-05-21 13:40:00'),\n",
       " Timestamp('2015-06-09 13:32:00'),\n",
       " Timestamp('2015-06-14 13:40:00'),\n",
       " Timestamp('2015-07-03 13:32:00'),\n",
       " Timestamp('2015-07-08 13:40:00'),\n",
       " Timestamp('2015-07-27 13:32:00'),\n",
       " Timestamp('2015-08-01 13:40:00'),\n",
       " Timestamp('2015-08-20 13:32:00'),\n",
       " Timestamp('2015-08-25 13:40:00'),\n",
       " Timestamp('2015-09-13 13:32:00'),\n",
       " Timestamp('2015-09-18 13:40:00'),\n",
       " Timestamp('2015-10-07 13:32:00'),\n",
       " Timestamp('2015-10-12 13:40:00'),\n",
       " Timestamp('2015-10-31 13:32:00'),\n",
       " Timestamp('2015-11-24 13:32:00'),\n",
       " Timestamp('2015-11-29 13:40:00'),\n",
       " Timestamp('2015-12-18 13:32:00'),\n",
       " Timestamp('2015-12-23 13:40:00'),\n",
       " Timestamp('2016-01-11 13:32:00'),\n",
       " Timestamp('2016-02-04 13:32:00'),\n",
       " Timestamp('2016-02-09 13:40:00'),\n",
       " Timestamp('2016-02-28 13:32:00'),\n",
       " Timestamp('2016-03-04 13:40:00'),\n",
       " Timestamp('2016-03-23 13:32:00'),\n",
       " Timestamp('2016-03-28 13:40:00'),\n",
       " Timestamp('2016-04-16 13:32:00'),\n",
       " Timestamp('2016-04-21 13:40:00'),\n",
       " Timestamp('2016-05-10 13:32:00'),\n",
       " Timestamp('2016-05-15 13:40:00'),\n",
       " Timestamp('2016-06-03 13:32:00'),\n",
       " Timestamp('2016-06-08 13:40:00'),\n",
       " Timestamp('2016-07-02 13:40:00'),\n",
       " Timestamp('2016-07-21 13:32:00'),\n",
       " Timestamp('2016-07-26 13:40:00'),\n",
       " Timestamp('2016-08-14 13:32:00'),\n",
       " Timestamp('2016-08-19 13:40:00'),\n",
       " Timestamp('2016-09-07 13:32:00'),\n",
       " Timestamp('2016-09-12 13:40:00'),\n",
       " Timestamp('2016-10-06 13:40:00'),\n",
       " Timestamp('2016-10-13 13:32:00'),\n",
       " Timestamp('2016-10-18 13:40:00'),\n",
       " Timestamp('2016-10-30 13:40:00'),\n",
       " Timestamp('2016-11-06 13:32:00'),\n",
       " Timestamp('2016-11-11 13:40:00'),\n",
       " Timestamp('2016-11-30 13:32:00'),\n",
       " Timestamp('2016-12-05 13:40:00'),\n",
       " Timestamp('2016-12-17 13:40:00'),\n",
       " Timestamp('2016-12-24 13:32:00'),\n",
       " Timestamp('2016-12-29 13:40:00'),\n",
       " Timestamp('2017-01-10 13:40:00'),\n",
       " Timestamp('2017-01-17 13:32:00'),\n",
       " Timestamp('2017-02-03 13:40:00'),\n",
       " Timestamp('2017-02-22 13:32:00'),\n",
       " Timestamp('2017-02-27 13:40:00'),\n",
       " Timestamp('2017-03-05 13:39:00'),\n",
       " Timestamp('2017-03-06 13:32:00'),\n",
       " Timestamp('2017-03-11 13:40:00'),\n",
       " Timestamp('2017-03-17 13:39:00'),\n",
       " Timestamp('2017-03-18 13:32:00'),\n",
       " Timestamp('2017-03-23 13:40:00'),\n",
       " Timestamp('2017-03-29 13:39:00'),\n",
       " Timestamp('2017-03-30 13:32:00'),\n",
       " Timestamp('2017-04-04 13:40:00'),\n",
       " Timestamp('2017-04-10 13:39:00'),\n",
       " Timestamp('2017-04-11 13:32:00'),\n",
       " Timestamp('2017-04-16 13:40:00'),\n",
       " Timestamp('2017-04-22 13:39:00'),\n",
       " Timestamp('2017-04-23 13:32:00'),\n",
       " Timestamp('2017-04-28 13:40:00'),\n",
       " Timestamp('2017-05-04 13:39:00'),\n",
       " Timestamp('2017-05-05 13:32:00'),\n",
       " Timestamp('2017-05-16 13:39:00'),\n",
       " Timestamp('2017-05-17 13:32:00'),\n",
       " Timestamp('2017-05-28 13:39:00'),\n",
       " Timestamp('2017-05-29 13:32:00'),\n",
       " Timestamp('2017-06-09 13:39:00'),\n",
       " Timestamp('2017-06-10 13:32:00'),\n",
       " Timestamp('2017-06-21 13:39:00'),\n",
       " Timestamp('2017-06-22 13:32:00'),\n",
       " Timestamp('2017-07-03 13:39:00'),\n",
       " Timestamp('2017-07-04 13:32:00'),\n",
       " Timestamp('2017-07-15 13:39:00'),\n",
       " Timestamp('2017-07-16 13:32:00'),\n",
       " Timestamp('2017-07-27 13:39:00'),\n",
       " Timestamp('2017-07-28 13:32:00'),\n",
       " Timestamp('2017-08-08 13:39:00'),\n",
       " Timestamp('2017-08-09 13:32:00'),\n",
       " Timestamp('2017-08-20 13:39:00'),\n",
       " Timestamp('2017-08-21 13:32:00'),\n",
       " Timestamp('2017-09-01 13:39:00'),\n",
       " Timestamp('2017-09-02 13:32:00'),\n",
       " Timestamp('2017-09-13 13:39:00'),\n",
       " Timestamp('2017-09-14 13:32:00'),\n",
       " Timestamp('2017-09-25 13:39:00'),\n",
       " Timestamp('2017-09-26 13:32:00'),\n",
       " Timestamp('2017-10-07 13:39:00'),\n",
       " Timestamp('2017-10-08 13:32:00'),\n",
       " Timestamp('2017-10-19 13:39:00'),\n",
       " Timestamp('2017-10-20 13:32:00'),\n",
       " Timestamp('2017-11-01 13:32:00'),\n",
       " Timestamp('2017-11-12 13:39:00'),\n",
       " Timestamp('2017-11-13 13:32:00'),\n",
       " Timestamp('2017-11-24 13:39:00'),\n",
       " Timestamp('2017-11-25 13:32:00'),\n",
       " Timestamp('2017-12-06 13:39:00'),\n",
       " Timestamp('2017-12-07 13:32:00'),\n",
       " Timestamp('2017-12-18 13:39:00'),\n",
       " Timestamp('2017-12-19 13:32:00'),\n",
       " Timestamp('2017-12-30 13:39:00'),\n",
       " Timestamp('2017-12-31 13:32:00'),\n",
       " Timestamp('2018-01-11 13:39:00'),\n",
       " Timestamp('2018-01-12 13:32:00'),\n",
       " Timestamp('2018-01-23 13:39:00'),\n",
       " Timestamp('2018-01-24 13:32:00'),\n",
       " Timestamp('2018-02-04 13:39:00'),\n",
       " Timestamp('2018-02-05 13:32:00'),\n",
       " Timestamp('2018-02-16 13:39:00'),\n",
       " Timestamp('2018-02-17 13:32:00'),\n",
       " Timestamp('2018-02-28 13:39:00'),\n",
       " Timestamp('2018-03-01 13:32:00'),\n",
       " Timestamp('2018-03-12 13:39:00'),\n",
       " Timestamp('2018-03-13 13:32:00'),\n",
       " Timestamp('2018-03-24 13:39:00'),\n",
       " Timestamp('2018-03-25 13:32:00'),\n",
       " Timestamp('2018-04-05 13:39:00'),\n",
       " Timestamp('2018-04-06 13:32:00'),\n",
       " Timestamp('2018-04-17 13:39:00'),\n",
       " Timestamp('2018-04-18 13:32:00'),\n",
       " Timestamp('2018-04-29 13:39:00'),\n",
       " Timestamp('2018-04-30 13:32:00'),\n",
       " Timestamp('2018-05-11 13:39:00'),\n",
       " Timestamp('2018-05-12 13:32:00'),\n",
       " Timestamp('2018-05-23 13:39:00'),\n",
       " Timestamp('2018-05-24 13:32:00'),\n",
       " Timestamp('2018-06-04 13:39:00'),\n",
       " Timestamp('2018-06-05 13:32:00'),\n",
       " Timestamp('2018-06-16 13:39:00'),\n",
       " Timestamp('2018-06-17 13:32:00'),\n",
       " Timestamp('2018-06-28 13:39:00'),\n",
       " Timestamp('2018-07-10 13:39:00'),\n",
       " Timestamp('2018-07-11 13:32:00'),\n",
       " Timestamp('2018-07-22 13:39:00'),\n",
       " Timestamp('2018-07-23 13:32:00'),\n",
       " Timestamp('2018-08-03 13:39:00'),\n",
       " Timestamp('2018-08-04 13:32:00'),\n",
       " Timestamp('2018-08-15 13:39:00'),\n",
       " Timestamp('2018-08-16 13:32:00'),\n",
       " Timestamp('2018-08-27 13:40:00'),\n",
       " Timestamp('2018-08-28 13:32:00'),\n",
       " Timestamp('2018-09-08 13:40:00'),\n",
       " Timestamp('2018-09-09 13:32:00'),\n",
       " Timestamp('2018-09-20 13:40:00'),\n",
       " Timestamp('2018-09-21 13:32:00'),\n",
       " Timestamp('2018-10-02 13:40:00'),\n",
       " Timestamp('2018-10-03 13:32:00'),\n",
       " Timestamp('2018-10-14 13:40:00'),\n",
       " Timestamp('2018-10-15 13:32:00'),\n",
       " Timestamp('2018-10-26 13:40:00'),\n",
       " Timestamp('2018-10-27 13:32:00'),\n",
       " Timestamp('2018-11-07 13:40:00'),\n",
       " Timestamp('2018-11-08 13:32:00'),\n",
       " Timestamp('2018-11-19 13:40:00'),\n",
       " Timestamp('2018-11-20 13:32:00'),\n",
       " Timestamp('2018-12-01 13:40:00'),\n",
       " Timestamp('2018-12-02 13:32:00'),\n",
       " Timestamp('2018-12-13 13:40:00'),\n",
       " Timestamp('2018-12-14 13:32:00'),\n",
       " Timestamp('2018-12-25 13:40:00'),\n",
       " Timestamp('2018-12-26 13:32:00'),\n",
       " Timestamp('2019-01-06 13:39:00'),\n",
       " Timestamp('2019-01-07 13:32:00'),\n",
       " Timestamp('2019-01-18 13:39:00'),\n",
       " Timestamp('2019-01-19 13:32:00')]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "t.to_csv(\"../data/all_dat_desc.csv\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
